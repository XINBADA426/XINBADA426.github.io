<search>
    
     <entry>
        <title>如何将表格文件转为 sqlite3 数据库文件</title>
        <url>https://xinbada426.github.io/post/2020-08-18/</url>
        <categories>
          <category>Others</category>
        </categories>
        <tags>
          <tag>数据库</tag><tag>SQL</tag>
        </tags>
        <content type="html">  平时工作中碰到的需求，需要将 tsv/csv 文件转为 sqlite3 数据库文件，本来一直想用 python 的数据库接口来实现这一目的，但经在网上的搜索，发现直接使用 sqlite3 的点命令更为方便，特此记录。
 数据准备 1  for i in {1..10};do echo -e &amp;#34;$i\t${i}_${i}&amp;#34;;done &amp;gt; test.tsv   数据库生成  连接数据库  1 2  # 如果没有 test.db, 则会自动生成 sqlite3 test.db   使用 sqlite3 的点命令生成表  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  # 查看数据库内已有的 table .tables # 设定为制表符输出 .mode tabs # 有头，首行将作为 headr，把表格导入名为 head 的 table 中 .import test.tsv head # 查看 header .schema head # 查看前5行 SELECT * FROM head LIMIT 5; # 2	2_2 # 3	3_3 # 4	4_4 # 5	5_5 # 6	6_6 # 无头，把表格导入名为 nohead 的 table 中 CREATE TABLE nohead(&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;); .import test.tsv nohead # 查看 header .schema nohead # 查看前5行 SELECT * FROM nohead LIMIT 5; # 1	1_1 # 2	2_2 # 3	3_3 # 4	4_4 # 5	5_5 # 退出数据库 .quit   备注 常用的点命令可使用 .help 查询，.help command可查看某一点命令的具体使用方法
</content>
    </entry>
    
     <entry>
        <title>HUGO 备忘</title>
        <url>https://xinbada426.github.io/post/2020-08-17/</url>
        <categories>
          <category>Others</category>
        </categories>
        <tags>
          <tag>HUGO</tag>
        </tags>
        <content type="html">  这是一个 HUGO 使用的备忘
 常用命令 新建文章 hugo new post/file_name.md 如要发布，记得修改 draft 为 true
在本地查看 hugo serve -D
建立静态网页 hugo -D
发布  进入 public 目录 使用 git 推送到 github  </content>
    </entry>
    
     <entry>
        <title>Blast2GO 本地化</title>
        <url>https://xinbada426.github.io/post/2020-07-23/</url>
        <categories>
          <category>bioinformation</category>
        </categories>
        <tags>
          <tag>Blast2GO</tag><tag>数据库</tag>
        </tags>
        <content type="html"> 准备 Linux版本信息 1 2  #&amp;gt; cat /etc/redhat-release CentOS Linux release 7.7.1908 (Core)   mysql 如果你从未使用过mysql
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  # 下载源 #&amp;gt; wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm # 安装源 #&amp;gt; rpm -ivh mysql-community-release-el7-5.noarch.rpm # 安装 #&amp;gt; yum install -y mysql-server # 查看版本信息 #&amp;gt; mysql -V mysql Ver 14.14 Distrib 5.6.49, for Linux (x86_64) using EditLine wrapper # 启动mysql服务 #&amp;gt; systemctl start mysqld # 设定mysql root密码 #&amp;gt; /usr/bin/mysqladmin -u root password &amp;#39;your password&amp;#39; # 查看状态 #&amp;gt; systemctl status mysqld # 设定开机启动 #&amp;gt; systemctl enable mysqld   Java 没有使用网上推荐的 JDK 6，7，各个步骤正常
1 2 3 4  $&amp;gt; java -version openjdk version &amp;#34;1.8.0_242&amp;#34; OpenJDK Runtime Environment (build 1.8.0_242-b08) OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)   Data  gene2accession.gz gene_info.gz idmapping.tb.gz godatabase  b2g4pipe b2g4pipe_v2.5.zip 提取码：6p3s
local_b2g_db local_b2g_db.tar.bz2 提取码：drb9
数据库安装 创建b2g数据库并初始化各个表 1 2 3 4 5 6 7 8 9 10 11 12  # 创建 `gene2accession` `gene_info` `gi2uniprot` 这三个表 #&amp;gt; mysql -uroot -p &amp;lt; b2gdb.sql # 利用 go_monthly-assocdb 创建其它的表 # `assoc_rel` `association` `association_isoform` `association_property` `association_qualifier` `association_species_qualifier` `db` `dbxref` `evidence` `evidence_dbxref` `gene_product` `gene_product_ancestor` `gene_product_count` `gene_product_dbxref` `gene_product_homology` `gene_product_homolset` `gene_product_phylotree` `gene_product_property` `gene_product_seq` `gene_product_subset` `gene_product_synonym` `graph_path` `graph_path2term` `homolset` `instance_data` `intersection_of` `phylotree` `phylotree_property` `relation_composition``relation_properties` `seq` `seq_dbxref` `seq_property` `source_audit` `species` `term` `term2term` `term2term_metadata` `term_audit` `term_dbxref` `term_definition` `term_property` `term_subset` `term_synonym` #&amp;gt; mysql -uroot -p b2g &amp;lt; go_monthly-assocdb-data # 将文件 gene2accession 导入 表 `gene2accession` #&amp;gt; mysql -uroot -p b2g -e&amp;#34;LOAD DATA LOCAL INFILE &amp;#39;gene2accession&amp;#39; INTO TABLE gene2accession FIELDS TERMINATED BY &amp;#39;\t&amp;#39; LINES TERMINATED BY &amp;#39;\n&amp;#39;;&amp;#34; # 导入各种id映射关系 #&amp;gt; java -cp .:mysql-connector-java-5.0.8-bin.jar: ImportIdMapping idmapping.tb localhost b2g blast2go blast4it   示例运行  解压 b2g4pipe-2.5.0 并进入文件夹 修改 b2gPipe.properties 内的数据库信息如下（同在 b2gdb.sql 的构建数据库时的信息）  1 2 3 4 5  // GO and B2G Data Access Basic Dbacces.dbname=b2g Dbacces.dbhost=localhost Dbacces.dbuser=blast2go Dbacces.dbpasswd=blast4it   运行目录下的 runPipeExample.sh  已知问题  go_monthly-assocdb-data.gz这个文件最后的更新是2017年1月 数据库太大，我用来测试的破机子硬盘还是有点压力的  参考  本地Blast2GO安装，及其数据库更新和导入数据中断的解决方案-  </content>
    </entry>
    
     <entry>
        <title>今天晚上失眠了</title>
        <url>https://xinbada426.github.io/post/2020-06-04/</url>
        <categories>
          <category>吐槽</category>
        </categories>
        <tags>
          <tag>吐槽</tag>
        </tags>
        <content type="html"> 2020年，我已31岁。
虽然不想承认，但又不得不承认，人到中年，越来越大的压力确实再每天拷打着我的内心。我一直认为自己是一个很乐观的人，长辈身体康健，无家中琐事担扰。但当年龄慢慢增长，自己独立于原生家庭，组成自己的家庭，越来越多的事情却让人不甚心烦。
我缺钱！！！
我长这么大从来没有觉得自己缺钱花，父母一直再尽他们所能，给我提供最好的环境，学生时代，每每手中钱花完，直接一个电话，父母便会把钱打到卡上，我没有体会过缺钱的滋味，自然不知道挣钱的辛苦。等到自己走入社会，由于自己本身是那种比较宅的人，工资发了也仅仅只是用作日常生活，也不用为钱发愁。虽然一直跟媳妇在一起，挣得不多，但挣多少花多少，也么有什么压力，过得也还算潇洒。
工资涨了~赚的钱多了，但我们却感觉越来越穷了~因为自己的家庭的缘故，我也从来未想过夫妻双方原生家庭会对我们小两口的生活造成什么影响。妻子娘家从原来的几千几千的借，慢慢的变成几万几万~说得是借，但从未有说过还。妻子是个很善良的人，觉得父母养育之恩，给他们钱花是儿女本分，她的父母也不想同我们借。
我说她就好像樊胜美，她否认，樊胜美的父母对她可坏了！！！
手上有钱时尚不觉得如何，但今年的疫情，把我们这个问题的严重性全都暴露了出来。平时赚的钱都给她家人拿去，手中只留一点，托管无法继续，公司又在降薪，就看到卡里的钱在嗖嗖的往下掉，我们突然就慌了。今年本打算凑钱买房，但借出去的钱回不来，托管又赔了挺多，算是没戏了；本打算要个宝宝，但看着卡中那么点积蓄，却又犹豫了，这点钱，是不是连孩子都生不起~
我父母都是老古董~
这之前，我一直这么觉得。他们想让我找个条件好一些结婚，想让我去考公务员，想让我继续去读博~我那时就觉得，他们真是愚昧啊，这都什么年代了，什么门当户对~就公务员那点工资，还不够我吃喝~继续读？门都么有，我在学校早就呆不下去了，实在是太没意思了~
现在想想，我真蠢~活生生的把自己的日子过成了一个地狱模式。
我也开始对媳妇抱怨，我们过日子，养你那一大家子算是怎么回事？去考公务员，去读博？我有点动摇了~我想过离婚，自己一个人的日子是要好过太多，但也仅仅是想一想，我还是很爱我的媳妇的~
深夜的抱怨，日子还是要过的，只希望能够越来越好~
</content>
    </entry>
    
     <entry>
        <title>PBS作业投递系统使用</title>
        <url>https://xinbada426.github.io/post/2020-06-01/</url>
        <categories>
          <category>Others</category>
        </categories>
        <tags>
          <tag>PBS</tag>
        </tags>
        <content type="html"> 系统架构  计算节点共有5台曙光I840-G30四路服务器。每台服务器配置4颗20核Intel Xeon 6248 2.5GHz处理器，1536G DDR4内存。 GPU计算节点为1台曙光X745-G30双路服务器。配置2颗20核Intel Xeon 6230 2.1GHz处理器，256G DDR3内存，4张GeForce RTX 2080 Ti显卡。 存储系统采用lustre文件系统，使用一台曙光I620-G30作为元数据服务器，两台曙光S640-G30作为数据服务器，系统提供260T可用空间，为集群系统提供高效、稳定读写性能和存储资源的灵活快速的部署能力。 系统配置管理节点1台，型号为曙光I620-G30双路服务器，部署曙光Gridview 4.0集群管理系统。用户可通过IP地址实现Web访问。 系统配置登录节点1台，型号为曙光I620-G30双路服务器，用户可从内网直接登录该节点实现作业提交、编译程序等。 系统配置1套互联的万兆光纤以太网作为管理网络，配置1套100Gb Infiniband高速网络作为计算网路。 硬件整体架构采用冗余设备或部件，保证设备、部件、链路的高可用性及数据读写、传输的稳定可靠进。  作业调度常用命令 获取所有的节点信息（qhost） /opt/gridview/pbs/dispatcher/bin/lsf_cmd/listhosts
获取所有队列信息（qqueue） /opt/gridview/pbs/dispatcher/bin/lsf_cmd/listqueues
获取所有任务信息(qa) /opt/gridview/pbs/dispatcher/bin/lsf_cmd/listjobs
获取我的任务信息（qs） /opt/gridview/pbs/dispatcher/bin/qstat
任务投递（qsub） /opt/gridview/pbs/dispatcher/bin/qsub
1 2 3 4  # 投递任务到指定节点 qsub -l nodes=node3 t.sh # 投递任务到指定队列 qsub -q middle t.sh   常用目录 管理员软件安装目录 /public/software/
我的软件安装目录 /public/home/guest/softwares
PBS安装目录 /opt/gridview/pbs/dispatcher/bin
</content>
    </entry>
    
     <entry>
        <title>CAZy数据库简介</title>
        <url>https://xinbada426.github.io/post/2018-02-06/</url>
        <categories>
          <category>bioinformation</category>
        </categories>
        <tags>
          <tag>数据库</tag><tag>CAZy</tag>
        </tags>
        <content type="html"> 碳水化合物活性酶数据库(CAZy) 提供了酶分子序列的家族信息，物种来源，基因序列，蛋白序列，三维结构，EC分类，相关数据库链接…… 建立此数据库是为了将酶分子的序列、结构、催化机制相关联~
分类 通过序列相似性进行家族分类，在这6个大的分类下可继续分为更为细致的亚类。
   名称 缩写     糖苷水解酶类 GHs   糖苷转移酶类 GTs   多糖裂解酶类 PLs   糖水化合物脂酶类 CEs   碳水化合物结合模块 CBMs   辅助模块酶类 AAs    名称说明 使用 CAZy的官网只提供了web查找的方法，如果需要本地化，需要自行爬取数据或者使用dbCAN的数据.
下载数据的说明
</content>
    </entry>
    
     <entry>
        <title>GTF/GFF文件的差异及其相互转换</title>
        <url>https://xinbada426.github.io/post/2016-09-08/</url>
        <categories>
          <category>bioinformation</category>
        </categories>
        <tags>
          <tag>gtf</tag><tag>gff</tag>
        </tags>
        <content type="html"> 我们在做生物分析的时候，经常会碰到GFF格式的文件以及GTF格式的注释文件。他们有着相似的名字，甚至连内容都极为相似~那么，他们究竟差在哪里呢？
GFF全称为general feature format，这种格式主要是用来注释基因组。 GTF全称为gene transfer format，主要是用来对基因进行注释。
 数据结构 GTF文件以及GFF文件都由9列数据组成，这两种文件的前8列都是相同的（一些小的差别）
   列 内容     1 reference sequence name   2 annotation source   3 feature type   4 start coordinate   5 end coordinate   6 score   7 strand   8 frame   9 attributes    GFF GFF文件是一种用来描述基因组特征的文件，现在我们所使用的大部分都是第三版）（GFF3）。GFF允许使用#作为注释符号，例如很多GFF文件都会使用如下的两行来表明其版本其创建日期：
1 2  ##gff-version 2 ##created 11/11/11   GFF文件每一列所代表的含义前面表格中有，但请注意，它的第3列feature type是不受约束的，你可以使用任意的名称，但也不要太淘气~用一些适当的名称对于后面的分析会有很大的帮助。 我们需要注意的是GFF文件的第9列，从第二版开始(GFF2)，所有的属性都以标签=值的方式呈现，各个属性之间以;作为分隔符
1  ID=geneAExon1;Name=geneA;Parent=geneA;Organism=human   在最新版本的GFF文件中(GFF3)，有一些是已经预先定义的属性特征，并且这些特征往往还有特殊的含义：ID这个标签实在各行都要有的；另外有一个Parent的属性，它表明了当前的特征是Parent特征的子集。
1 2 3  Contig01 PFAM gene 501 750 . &#43; 0 ID=geneA;Name=geneA Contig01 PFAM exon 501 650 . &#43; 2 ID=exonA1;Parent=geneA Contig01 PFAM exon 700 750 . &#43; 2 ID=exonA2;Parent=geneA   GTF 当前所广泛使用的GTF格式为第二版(GTF2)，它主要是用来描述基因的注释。GTF格式有两个硬性标准：
 根据所使用的软件的不同，feature types是必须注明的。 第9列必须以gene_id以及transcript_id开头 GTF文件的第9列同GFF文件不同，虽然同样是标签与值配对的情况，但标签与值之间以空格分开，且每个特征之后都要有分号;（包括最后一个特征）：  1  gene_id &amp;#34;geneA&amp;#34;;transcript_id &amp;#34;geneA.1&amp;#34;;database_id &amp;#34;0012&amp;#34;;modified_by &amp;#34;Damian&amp;#34;;duplicates 0;   两种文件的差异比较    列 GTF2 GFF3     reference sequence name same same   annotation source same same   feature type feature requirements depend on software can be anything   start coordinate same same   5. end coordinate same same   score not used optional   strand same same   frame same same   attributes 空格分隔 =分隔    两种文件格式之间的转换 偷个懒，直接使用Cufflinks里面的工具gffread
1 2 3 4  #gff2gtf gffread my.gff3 -T -o my.gtf #gtf2gff gffread merged.gtf -o- &amp;gt; merged.gff3    参考（可能需要梯子）
</content>
    </entry>
    
</search>
